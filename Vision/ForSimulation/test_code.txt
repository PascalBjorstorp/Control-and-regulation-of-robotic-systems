// Intersection test-ish code
/*
    Mat test_image = Mat::zeros(10, 10, CV_8UC1);

    Mat image;
    cvtColor(test_image, image, COLOR_GRAY2BGR);

    vector<Vec4i> int_test;

    int_test.push_back(Vec4i(3,5,7,5));
    int_test.push_back(Vec4i(6,1,6,6));

    for(int i = 0; i < int_test.size(); i++){
        line(image, Point(int_test[i][0], int_test[i][1]), Point(int_test[i][2],int_test[i][3]), Scalar(0,0,255), 1);
    }

    namedWindow("int - test", WINDOW_NORMAL);
    imshow("int - test", image);

    inters = find_all_inters(int_test);

    for(int i = 0; i < inters.size(); i++){
        std::cout << "int point: " << inters[i] << std::endl;
        circle(image, inters[i], 1, Scalar(128,0,128), -1);
    }

    namedWindow("int - test - int", WINDOW_NORMAL);
    imshow("int - test - int", image);*/

    // Testing line intercepts with extended lines
    /*Point temp_int;
    std::vector<Point> inters;
    std::vector<Vec4i> extended_lines;

    
    for(size_t i = 0; i < lines.size(); i++){
        if(corner_between(lines[i], lines[i+1], 15)){
            lines[i] = extend_line(lines[i], 1.2);
            lines[i+1] = extend_line(lines[i+1], 1.2);
            temp_int = calc_inter(lines[i], lines[i+1]);
            line(output, Point(lines[i][0], lines[i][1]), Point(lines[i][2], lines[i][3]), Scalar(255,0,255), 3, LINE_AA);
            line(output, Point(lines[i+1][0], lines[i+1][1]), Point(lines[i+1][2], lines[i+1][3]), Scalar(255,0,255), 3, LINE_AA);
            circle(output, temp_int, 30, Scalar(255,0,0), -1);
        }
        else{
            line(output, Point(lines[i][0], lines[i][1]), Point(lines[i][2], lines[i][3]), Scalar(0,0,255), 3, LINE_AA);
        }

        namedWindow("first", WINDOW_NORMAL);
        imshow("first", output);
        waitKey(0);

        line(output, Point(lines[i][0], lines[i][1]), Point(lines[i][2], lines[i][3]), Scalar(0,0,255), 3, LINE_AA);
        line(output, Point(lines[i+1][0], lines[i+1][1]), Point(lines[i+1][2], lines[i+1][3]), Scalar(0,0,255), 3, LINE_AA);
        //circle(output, temp_int, 30, Scalar(0,255,0), -1);

        namedWindow("first", WINDOW_NORMAL);
        imshow("first", output);
        waitKey(0);
    }*/

    // Draw start and end points of the lines in sorted order - just for showing:
    /*for(int i = 0; i < lines.size(); i++){
        circle(output, Point(lines[i][0], lines[i][1]), 30, Scalar(0,255,0), -1);
        circle(output, Point(lines[i][2], lines[i][3]), 30, Scalar(0,255,0), -1);

        namedWindow("first", WINDOW_NORMAL);
        imshow("first", output);
        waitKey(0);
    }*/